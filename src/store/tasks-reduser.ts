import {v1} from "uuid";import {TasksStateType} from "../App";import {AddTodoListAT, RemoveTodoListAT} from "./todolist-reduser";export type RemoveTaskAT = {    type: "REMOVE-TASK",    taskID: string,    todolistID: string,}export type AddTaskAT = {    type: "ADD-TASK",    title: string,    todolistID: string,}export type ChangeStatusTaskAT = {    type: "CHANGE-STATUS-TASK",    taskID: string,    isDone: boolean,    todolistID: string}export type ChangeTitleTaskAT = {    type: "CHANGE-TITLE-TASK",    taskID: string,    newTitle: string,    todolistID: string}const initialState: TasksStateType = {}export type ActionType =    RemoveTaskAT    | AddTaskAT    | ChangeStatusTaskAT    | ChangeTitleTaskAT    | AddTodoListAT    | RemoveTodoListATexport const tasksReducer =    (state = initialState, action: ActionType): TasksStateType => {        switch (action.type) {            case "REMOVE-TASK":                return {                    ...state,                    [action.todolistID]: state[action.todolistID].filter(task => task.id !== action.taskID)                }            case "ADD-TASK":                return {                    ...state,                    [action.todolistID]: [{id: v1(), title: action.title, isDone: false}, ...state[action.todolistID]]                }            case "CHANGE-STATUS-TASK":                return {                    ...state,                    [action.todolistID]: state[action.todolistID]                        .map(task => task.id === action.taskID ? {...task, isDone: action.isDone} : task)                }            case "CHANGE-TITLE-TASK":                return {                    ...state,                    [action.todolistID]: state[action.todolistID]                        .map(task => task.id === action.taskID ? {...task, title: action.newTitle} : task)                }            case "ADD-TODOLIST":                return {                    ...state,                    [action.todolistId]: []                }            case "REMOVE-TODOLIST":                let newState = {...state}                delete newState[action.id]                return newState            default:                return state        }    }export const removeTaskAC = (taskID: string, todolistID: string,): RemoveTaskAT => {    return {type: "REMOVE-TASK", taskID, todolistID,}}export const addTaskAC = (title: string, todolistID: string,): AddTaskAT => {    return {type: "ADD-TASK", title, todolistID}}export const changeTaskStatusAC = (taskID: string, isDone: boolean, todolistID: string): ChangeStatusTaskAT => {    return {type: "CHANGE-STATUS-TASK", taskID, isDone, todolistID}}export const changeTaskTitleAC = (taskID: string, newTitle: string, todolistID: string): ChangeTitleTaskAT => {    return {type: "CHANGE-TITLE-TASK", taskID, newTitle, todolistID}}