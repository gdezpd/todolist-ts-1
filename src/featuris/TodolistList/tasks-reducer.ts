import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer';import {TasksStateType} from '../../app/App';import {Dispatch} from "redux";import {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from "../../api/todolist-api";import {AppRootStateType} from "../../app/store";import {AppActionsType, setAppReducerAC, setErrorAC} from "../../app/app-reducer";const initialState: TasksStateType = {}export const tasksReducer = (state: TasksStateType = initialState, action: ActionsTaskType): TasksStateType => {    switch (action.type) {        case "SET-TASK": {            return {...state, [action.todolistId]: action.tasks}        }        case "SET-TODOS": {            const copyState = {...state}            action.todos.forEach(tl => {                copyState[tl.id] = []            })            return copyState        }        case 'REMOVE-TASK': {            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}        }        case 'ADD-TASK': {            return {...state, [action.newTask.todoListId]: [action.newTask, ...state[action.newTask.todoListId]]}        }        case 'UPDATE-TASK':            return {                ...state,                [action.todolistId]: state[action.todolistId]                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)            }        case 'ADD-TODOLIST': {            return {...state, [action.todolist.id]: []}        }        case 'REMOVE-TODOLIST': {            const copyState = {...state};            delete copyState[action.id];            return copyState;        }        default:            return state;    }}// Actionsexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)export const addTaskAC = (newTask: TaskType) => ({type: 'ADD-TASK', newTask} as const)export const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)export const setTaskAC = (tasks: TaskType[], todolistId: string) => ({type: 'SET-TASK', tasks, todolistId} as const)// export const fetchTasksAC = (todoId: string, tasks: TaskType[]) => ({type: 'FETCH-TASK', todoId, tasks} as const)// Thunkexport const fetchTasksTC = (todoId: string) => {    return (dispatch: Dispatch) => {        dispatch(setAppReducerAC('loading'))        todolistAPI.getTasks(todoId)            .then((res) => {                dispatch(setTaskAC(res.data.items, todoId))                dispatch(setAppReducerAC('succeeded'))            })    }}export const deleteTasksTC = (todoId: string, taskId: string) => (dispatch: Dispatch) => {    dispatch(setAppReducerAC('loading'))    todolistAPI.deleteTask(todoId, taskId)        .then((res) => {            dispatch(removeTaskAC(taskId, todoId))            dispatch(setAppReducerAC('succeeded'))        })}export const createTaskTS = (todoId: string, title: string) => (dispatch: Dispatch) => {    dispatch(setAppReducerAC('loading'))    todolistAPI.createTask(todoId, title)        .then((res) => {            const newTask = res.data.data.item            dispatch(addTaskAC(newTask))            dispatch(setAppReducerAC('succeeded'))        })}export const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>    (dispatch: Dispatch<ActionsTaskType>, getState: () => AppRootStateType) => {        dispatch(setAppReducerAC('loading'))        const state = getState()        const task = state.tasks[todolistId].find(t => t.id === taskId)        if (!task) {            console.warn('task not found in the state')            return        }        const apiModel: UpdateTaskModelType = {            deadline: task.deadline,            description: task.description,            priority: task.priority,            startDate: task.startDate,            title: task.title,            status: task.status,            // entityStatus: 'idle',            ...domainModel        }        todolistAPI.updateTask(todolistId, taskId, apiModel)            .then(res => {                if (res.data.resultCode == 0) {                    const action = updateTaskAC(taskId, domainModel, todolistId)                    dispatch(action)                    dispatch(setAppReducerAC('succeeded'))                } else {                   dispatch(setErrorAC(res.data.messages[0]))                    // handleServerAppError(res.data, dispatch)                }            })    }// Typesexport type UpdateDomainTaskModelType = {    title?: string    description?: string    status?: TaskStatuses    priority?: TaskPriorities    startDate?: string    deadline?: string}type ActionsTaskType =    | ReturnType<typeof setTaskAC>    | ReturnType<typeof removeTaskAC>    | ReturnType<typeof addTaskAC>    | ReturnType<typeof updateTaskAC>    | AddTodolistActionType    | RemoveTodolistActionType    | SetTodolistsActionType    | AppActionsType