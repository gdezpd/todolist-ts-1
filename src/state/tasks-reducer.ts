import {v1} from 'uuid';import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer';import {TasksStateType} from '../App';import {Dispatch} from "redux";import {TaskPriorities, TaskStatuses, TaskType, todolistAPI} from "../api/todolist-api";export type RemoveTaskActionType = {    type: 'REMOVE-TASK',    todolistId: string    taskId: string}export type AddTaskActionType = {    type: 'ADD-TASK',    todolistId: string    title: string}export type ChangeTaskStatusActionType = {    type: 'CHANGE-TASK-STATUS',    todolistId: string    taskId: string    status: TaskStatuses}export type ChangeTaskTitleActionType = {    type: 'CHANGE-TASK-TITLE',    todolistId: string    taskId: string    title: string}export type SetTaskActionType = ReturnType<typeof setTaskAC>export type FetchTasksActionType = ReturnType<typeof fetchTasksAC>type ActionsType = RemoveTaskActionType | AddTaskActionType    | ChangeTaskStatusActionType    | ChangeTaskTitleActionType    | AddTodolistActionType    | RemoveTodolistActionType    | SetTodolistsActionType    | SetTaskActionType    | FetchTasksActionTypeconst initialState: TasksStateType = {}export const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {    switch (action.type) {        case "FETCH-TASK": {            let stateCopy = {...state}            stateCopy[action.todoId] = action.tasks            return stateCopy            // return {...state, [action.todoId]: action.tasks}        }        case "SET-TASK": {            let stateCopy = {...state}            stateCopy[action.todolistId] = action.tasks            return stateCopy        }        case "SET-TODOS": {            let stateCopy = {...state}            action.todos.forEach((tl) => {                stateCopy[tl.id] = []            })            return stateCopy        }        case 'REMOVE-TASK': {            const stateCopy = {...state}            const tasks = stateCopy[action.todolistId];            const newTasks = tasks.filter(t => t.id != action.taskId);            stateCopy[action.todolistId] = newTasks;            return stateCopy;        }        case 'ADD-TASK': {            const stateCopy = {...state}            const newTask: TaskType = {                id: v1(),                title: action.title,                status: TaskStatuses.New,                todoListId: action.todolistId, description: '',                startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low            }            const tasks = stateCopy[action.todolistId];            const newTasks = [newTask, ...tasks];            // @ts-ignore            stateCopy[action.todolistId] = newTasks;            return stateCopy;        }        case 'CHANGE-TASK-STATUS': {            let todolistTasks = state[action.todolistId];            let newTasksArray = todolistTasks                .map(t => t.id === action.taskId ? {...t, status: TaskStatuses.Completed} : t);            state[action.todolistId] = newTasksArray;            return ({...state});        }        case 'CHANGE-TASK-TITLE': {            let todolistTasks = state[action.todolistId];            // найдём нужную таску:            let newTasksArray = todolistTasks                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);            state[action.todolistId] = newTasksArray;            return ({...state});        }        case 'ADD-TODOLIST': {            return {                ...state,                [action.todolistId]: []            }        }        case 'REMOVE-TODOLIST': {            const copyState = {...state};            delete copyState[action.id];            return copyState;        }        default:            return state;    }}export const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {    return {type: 'REMOVE-TASK', taskId, todolistId}}export const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {    return {type: 'ADD-TASK', title, todolistId}}export const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}}export const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}}export const setTaskAC = (tasks: TaskType[], todolistId: string) => {    return {type: 'SET-TASK', tasks, todolistId} as const}export const fetchTasksAC = (todoId: string, tasks: TaskType[]) => {    return {type: 'FETCH-TASK', todoId, tasks} as const}// Thunkexport const fetchTasksTC = (todoId: string) => {    return (dispatch: Dispatch) => {        todolistAPI.getTasks(todoId)            .then((res) => {                let tasks = res.data.items                dispatch(fetchTasksAC(todoId, tasks))            })    }}export const createTaskTS = (todoId: string, title: string) => (dispatch: Dispatch) => {    todolistAPI.createTask(todoId, title)        .then((res) => {            dispatch(addTaskAC(title, todoId))        })}export const deleteTasksTC = (todoId: string, taskId: string) => (dispatch: Dispatch) => {    todolistAPI.deleteTask(todoId, taskId)        .then((res) => {            dispatch(removeTaskAC(taskId, todoId))        })}