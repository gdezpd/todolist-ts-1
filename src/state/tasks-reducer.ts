import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer';import {TasksStateType} from '../App';import {Dispatch} from "redux";import {TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from "../api/todolist-api";import {AppRootStateType} from "./store";const initialState: TasksStateType = {}export const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {    switch (action.type) {        case "FETCH-TASK": {            let stateCopy = {...state}            stateCopy[action.todoId] = action.tasks            return stateCopy            // return {...state, [action.todoId]: action.tasks}        }        case "SET-TASK": {            let stateCopy = {...state}            stateCopy[action.todolistId] = action.tasks            return stateCopy        }        case "SET-TODOS": {            let stateCopy = {...state}            action.todos.forEach((tl) => {                stateCopy[tl.id] = []            })            return stateCopy        }        case 'REMOVE-TASK': {            const stateCopy = {...state}            const tasks = stateCopy[action.todolistId];            const newTasks = tasks.filter(t => t.id != action.taskId);            stateCopy[action.todolistId] = newTasks;            return stateCopy;        }        case 'ADD-TASK': {            const stateCopy = {...state}            const tasks = stateCopy[action.newTask.todoListId];            const newTasks = [action.newTask, ...tasks];            stateCopy[action.newTask.todoListId] = newTasks;            return stateCopy;        }        case 'CHANGE-TASK-STATUS': {            let todolistTasks = state[action.todolistId];            let newTasksArray = todolistTasks                .map(t => t.id === action.taskId ? {...t, status: TaskStatuses.Completed} : t);            state[action.todolistId] = newTasksArray;            return ({...state});        }        case 'CHANGE-TASK-TITLE': {            let todolistTasks = state[action.todolistId];            // найдём нужную таску:            let newTasksArray = todolistTasks                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);            state[action.todolistId] = newTasksArray;            return ({...state});        }        case 'ADD-TODOLIST': {            return {                ...state,                [action.todolistId]: []            }        }        case 'REMOVE-TODOLIST': {            const copyState = {...state};            delete copyState[action.id];            return copyState;        }        default:            return state;    }}// Actionsexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)export const addTaskAC = (newTask: TaskType) => ({type: 'ADD-TASK', newTask} as const)export const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) => ({type: 'CHANGE-TASK-STATUS', status, todolistId, taskId} as const)export const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => ({type: 'CHANGE-TASK-TITLE', title, todolistId, taskId} as const)export const setTaskAC = (tasks: TaskType[], todolistId: string) => ({type: 'SET-TASK', tasks, todolistId} as const)export const fetchTasksAC = (todoId: string, tasks: TaskType[]) => ({type: 'FETCH-TASK', todoId, tasks} as const)// Thunkexport const fetchTasksTC = (todoId: string) => {    return (dispatch: Dispatch) => {        todolistAPI.getTasks(todoId)            .then((res) => {                let tasks = res.data.items                dispatch(fetchTasksAC(todoId, tasks))            })    }}export const deleteTasksTC = (todoId: string, taskId: string) => (dispatch: Dispatch) => {    todolistAPI.deleteTask(todoId, taskId)        .then((res) => {            dispatch(removeTaskAC(taskId, todoId))        })}export const createTaskTS = (todoId: string, title: string) => (dispatch: Dispatch) => {    todolistAPI.createTask(todoId, title)        .then((res) => {            const newTask = res.data.data.item            dispatch(addTaskAC(newTask))        })}export const changeTaskStatusTC = (todoId: string, taskId: string, status: TaskStatuses,) => (dispatch: Dispatch, getState: () => AppRootStateType) => {    const state = getState()    const allAppTasks = state.tasks    const tasksFromCurrentTodo = allAppTasks[todoId]    const currentTask = tasksFromCurrentTodo.find(el => {        return el.id === taskId    })    if (currentTask) {        const module: UpdateTaskModelType = {            title: currentTask.title,            status: status,            deadline: currentTask.deadline,            description: currentTask.description,            startDate: currentTask.startDate,            priority: currentTask.priority        }        todolistAPI.updateTask(todoId, taskId, module)            .then((res) => {                dispatch(changeTaskStatusAC(taskId, status, todoId))            })    }}export const changeTaskTitleTC = (taskId: string, title: string, todolistId: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {    const state = getState()    const allAppTasks = state.tasks    const tasksFromCurrentTodo = allAppTasks[todolistId]    const currentTask = tasksFromCurrentTodo.find(el => {        return el.id === taskId    })    if (currentTask) {        const module: UpdateTaskModelType = {            title: title,            status: currentTask.status,            deadline: currentTask.deadline,            description: currentTask.description,            startDate: currentTask.startDate,            priority: currentTask.priority        }        todolistAPI.updateTask(todolistId, taskId, module)            .then((res) => {                dispatch(changeTaskTitleAC(taskId, title, todolistId))            })    }}// Typestype ActionsType =    ReturnType<typeof setTaskAC>    | ReturnType<typeof removeTaskAC>    | ReturnType<typeof addTaskAC>    | ReturnType<typeof changeTaskStatusAC>    | ReturnType<typeof changeTaskTitleAC>    | AddTodolistActionType    | RemoveTodolistActionType    | SetTodolistsActionType    | ReturnType<typeof setTaskAC>    | ReturnType<typeof fetchTasksAC>