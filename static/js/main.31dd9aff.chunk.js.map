{"version":3,"sources":["reportWebVitals.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","api/todolist-api.ts","App.tsx","state/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","task","id","todolistId","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","onTitleChangeHandler","newValue","changeTaskTitle","className","isDone","Checkbox","Delete","Todolist","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","removeTodolist","map","style","paddingTop","Button","initialState","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","App","todolists","useSelector","state","dispatch","useDispatch","useEffect","res","todos","data","type","setTodolistsAC","action","taskId","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistTitleAC","addTodolist","v1","addTodolistAC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","item","Paper","rootReducer","combineReducers","stateCopy","forEach","newTasks","newTask","todolistTasks","newTasksArray","copyState","todolist","find","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31dd9aff.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from './EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { TaskType } from './Todolist'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback } from 'react'\r\nimport { AddItemForm } from './AddItemForm'\r\nimport { EditableSpan } from './EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task'\r\nimport { FilterValuesType } from './App';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist && tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {v1} from 'uuid';\r\nimport {TodolistType} from '../App';\r\nimport {TodoType} from \"../api/todolist-api\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodolistsActionType\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n\r\n        case \"SET-TODOS\": {\r\n            return action.todos.map((tl) => {\r\n                return {...tl, filter: 'all' as FilterValuesType}\r\n            })\r\n        }\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\nexport const setTodolistsAC = (todos: TodoType[]) => {\r\n    return {\r\n        type: 'SET-TODOS',\r\n        todos\r\n    } as const\r\n}\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\n\r\n\r\n","import {TaskType} from '../Todolist';\rimport {v1} from 'uuid';\rimport {\r    AddTodolistActionType,\r    FilterValuesType,\r    RemoveTodolistActionType,\r    SetTodolistsActionType\r} from './todolists-reducer';\rimport {TasksStateType} from '../App';\r\rexport type RemoveTaskActionType = {\r    type: 'REMOVE-TASK',\r    todolistId: string\r    taskId: string\r}\r\rexport type AddTaskActionType = {\r    type: 'ADD-TASK',\r    todolistId: string\r    title: string\r}\r\rexport type ChangeTaskStatusActionType = {\r    type: 'CHANGE-TASK-STATUS',\r    todolistId: string\r    taskId: string\r    isDone: boolean\r}\r\rexport type ChangeTaskTitleActionType = {\r    type: 'CHANGE-TASK-TITLE',\r    todolistId: string\r    taskId: string\r    title: string\r}\r\rtype ActionsType = RemoveTaskActionType | AddTaskActionType\r    | ChangeTaskStatusActionType\r    | ChangeTaskTitleActionType\r    | AddTodolistActionType\r    | RemoveTodolistActionType\r    | SetTodolistsActionType\r\rconst initialState: TasksStateType = {}\r\rexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r    switch (action.type) {\r\r        case \"SET-TODOS\": {\r            debugger\r            let stateCopy = {...state}\r            action.todos.forEach((tl) => {\r                stateCopy[tl.id] = []\r            })\r            return stateCopy\r        }\r\r        case 'REMOVE-TASK': {\r            const stateCopy = {...state}\r            const tasks = stateCopy[action.todolistId];\r            const newTasks = tasks.filter(t => t.id != action.taskId);\r            stateCopy[action.todolistId] = newTasks;\r            return stateCopy;\r        }\r        case 'ADD-TASK': {\r            const stateCopy = {...state}\r            const newTask: TaskType = {\r                id: v1(),\r                title: action.title,\r                isDone: false\r            }\r            const tasks = stateCopy[action.todolistId];\r            const newTasks = [newTask, ...tasks];\r            stateCopy[action.todolistId] = newTasks;\r            return stateCopy;\r        }\r        case 'CHANGE-TASK-STATUS': {\r            let todolistTasks = state[action.todolistId];\r            let newTasksArray = todolistTasks\r                .map(t => t.id === action.taskId ? {...t, isDone: action.isDone} : t);\r\r            state[action.todolistId] = newTasksArray;\r            return ({...state});\r        }\r        case 'CHANGE-TASK-TITLE': {\r            let todolistTasks = state[action.todolistId];\r            // найдём нужную таску:\r            let newTasksArray = todolistTasks\r                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\r            state[action.todolistId] = newTasksArray;\r            return ({...state});\r        }\r        case 'ADD-TODOLIST': {\r            return {\r                ...state,\r                [action.todolistId]: []\r            }\r        }\r        case 'REMOVE-TODOLIST': {\r            const copyState = {...state};\r            delete copyState[action.id];\r            return copyState;\r        }\r        default:\r            return state;\r    }\r}\r\rexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r}\rexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r    return {type: 'ADD-TASK', title, todolistId}\r}\rexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r    return {type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\r}\rexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r}\r\r","import axios from 'axios'\r\rconst instance = axios.create({\r    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r    withCredentials: true,\r    headers: {\r        'API-KEY': '74718249-56a1-4b64-b024-8ff831c849e8'\r    }\r})\rexport const todolistAPI = {\r    getTodos: () => {\r        return instance.get<TodoType[]>(`todo-lists/`,)\r    },\r    createTodo: (title: string) => {\r        return instance.post<CommonResponseType<{ item: TodoType }>>('todo-lists', {title})\r    },\r    deleteTodo: (todolistId: string) => {\r        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}`)\r    },\r    updateTodo: (todolistId: string, title: string) => {\r        return instance.put<CommonResponseType>(`https://social-network.samuraijs.com/api/1.1/todo-lists/${todolistId}`, {title})\r    },\r}\r\rexport type TodoType = {\r    id: string\r    title: string\r    addedDate: string\r    order: number\r}\r\rtype CommonResponseType<T = {}> = {\r    data: T\r    fieldsErrors: string[]\r    messages: string[]\r    resultCode: number\r}\r","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC, setTodolistsAC, TodolistDomainType\r\n} from './state/todolists-reducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {todolistAPI} from \"./api/todolist-api\";\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        let promise = todolistAPI.getTodos()\r\n        promise.then((res) => {\r\n            let todos = res.data\r\n            dispatch(setTodolistsAC(todos))\r\n        })\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const action = addTaskAC(title, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n    const changeStatus = useCallback(function (id: string, isDone: boolean, todolistId: string) {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }, []);\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { tasksReducer } from './tasks-reducer';\r\nimport { todolistsReducer } from './todolists-reducer';\r\nimport { combineReducers, createStore } from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}